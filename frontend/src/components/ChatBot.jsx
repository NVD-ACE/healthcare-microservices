// // src/components/ChatBot.jsx
// import React, { useState, useRef, useEffect } from 'react';
// import BotIconUrl from '../assets/icons/bot.svg';
// import UserIconUrl from '../assets/icons/user.svg';
// import axios from 'axios';

// const LOCAL_API_URL = 'http://localhost:8020/api/chatbot/respond/';

// export default function ChatBot() {
//   const [open, setOpen] = useState(false);
//   const [messages, setMessages] = useState([
//     { from: 'bot', text: 'Xin ch√†o! T√¥i l√† chatbot ch·∫©n ƒëo√°n s·ª©c kh·ªèe. H√£y m√¥ t·∫£ c√°c tri·ªáu ch·ª©ng c·ªßa b·∫°n.' }
//   ]);
//   const [input, setInput] = useState('');
//   const [loading, setLoading] = useState(false);
//   const [sessionId, setSessionId] = useState(null);
//   const messagesEndRef = useRef(null);

//   const toggleOpen = () => setOpen(prev => !prev);

//   const sendToChatbot = async (prompt) => {
//     setLoading(true);
//     try {
//       const res = await axios.post(LOCAL_API_URL, {
//         message: prompt,
//         // session_id: sessionId || null,
//       }, {
//         headers: {
//           'Content-Type': 'application/json',
//           'Accept': 'application/json',
//         },
//       });

//       // Save session ID if new
//       if (!sessionId && res.data.session_id) {
//         setSessionId(res.data.session_id);
//       }

//       return res.data.reply;
//     } catch (err) {
//       console.error('Chatbot API error', err);
//       return 'Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu.';
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleSend = async () => {
//     if (!input.trim()) return;
//     const userMsg = { from: 'user', text: input.trim() };
//     setMessages(prev => [...prev, userMsg]);
//     setInput('');

//     const loadingMsg = { from: 'bot', text: '...' };
//     setMessages(prev => [...prev, loadingMsg]);

//     const response = await sendToChatbot(userMsg.text);

//     setMessages(prev => {
//       // remove last loading placeholder
//       const withoutLoading = prev.filter(m => m.text !== '...');
//       return [...withoutLoading, { from: 'bot', text: response }];
//     });
//   };

//   useEffect(() => {
//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
//   }, [messages]);

//   return (
//     <div className='z-10 relative'>
//       <button
//         onClick={toggleOpen}
//         aria-label={open ? 'Close chat' : 'Open chat'}
//         className="fixed bottom-6 right-6 bg-gradient-to-tr from-purple-600 to-indigo-600 text-white w-16 h-16 rounded-full shadow-2xl flex items-center justify-center transform hover:scale-110 transition"
//       >
//         {open ? <span className="text-2xl">√ó</span> : <img src={BotIconUrl} alt="Chat" className="w-8 h-8" />}
//       </button>

//       {open && (
//         <div className="fixed bottom-24 right-6 w-80 h-96 bg-white rounded-2xl shadow-2xl flex flex-col overflow-hidden ring-1 ring-gray-200">
//           <div className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white px-4 py-3 flex items-center justify-between">
//             <div className="flex items-center space-x-2">
//               <img src={BotIconUrl} alt="Bot" className="w-6 h-6" />
//               <span className="font-semibold">T∆∞ v·∫•n s·ª©c kh·ªèe</span>
//             </div>
//             <button onClick={toggleOpen} aria-label="Close chat" className="text-xl">√ó</button>
//           </div>

//           <div className="flex-1 p-3 overflow-y-auto space-y-3 bg-gray-50">
//             {messages.map((m, i) => (
//               <div key={i} className={`flex ${m.from === 'bot' ? 'justify-start' : 'justify-end'}`}>
//                 <div className={`max-w-[70%] flex space-x-2 ${m.from === 'bot' ? 'flex-row' : 'flex-row-reverse'}`}>
//                   <img
//                     src={m.from === 'bot' ? BotIconUrl : UserIconUrl}
//                     alt={m.from}
//                     className="w-5 h-5 mt-1"
//                   />
//                   <div className={`p-2 rounded-xl shadow-sm text-sm leading-relaxed
//                     ${m.from === 'bot'
//                       ? 'bg-white text-gray-800'
//                       : 'bg-gradient-to-tr from-green-100 to-green-200 text-gray-800'}
//                   `}>
//                     {m.text}
//                   </div>
//                 </div>
//               </div>
//             ))}
//             <div ref={messagesEndRef} />
//           </div>

//           <div className="p-3 border-t border-gray-200 flex items-center space-x-2">
//             <input
//               value={input}
//               onChange={e => setInput(e.target.value)}
//               onKeyDown={e => e.key === 'Enter' && handleSend()}
//               disabled={loading}
//               placeholder="Nh·∫≠p tri·ªáu ch·ª©ng c·ªßa b·∫°n..."
//               className="flex-1 px-3 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500"
//             />
//             <button
//               onClick={handleSend}
//               disabled={loading}
//               className="px-4 py-2 bg-indigo-600 text-white rounded-xl hover:bg-indigo-700 transition disabled:opacity-50"
//             >
//               {loading ? '...' : 'G·ª≠i'}
//             </button>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }

import React, { useState, useRef, useEffect } from "react";
import {
  Bot,
  User,
  Send,
  Mic,
  MicOff,
  Settings,
  Zap,
  Brain,
  AlertTriangle,
  Heart,
  Activity,
  X,
  Sparkles,
} from "lucide-react";

// Google Gemini AI Integration
const GEMINI_API_KEY = "AIzaSyDgE7SbU0KPn9efezb7S9uztdIYlx3bwNo";
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent";

// OpenAI Integration (alternative)
const OPENAI_API_KEY =
  "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";
const OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";

export default function AdvancedAIChatBot() {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      from: "bot",
      text: "üè• Xin ch√†o! T√¥i l√† AI Health Assistant ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi Google Gemini.\n\n‚ú® T√¥i c√≥ th·ªÉ:\n‚Ä¢ Ph√¢n t√≠ch tri·ªáu ch·ª©ng chi ti·∫øt\n‚Ä¢ T∆∞ v·∫•n s·ª©c kh·ªèe chuy√™n s√¢u\n‚Ä¢ G·ª£i √Ω ƒëi·ªÅu tr·ªã v√† ph√≤ng ng·ª´a\n‚Ä¢ ƒê√°nh gi√° m·ª©c ƒë·ªô nghi√™m tr·ªçng\n‚Ä¢ H∆∞·ªõng d·∫´n chƒÉm s√≥c t·∫°i nh√†\n\n‚ö†Ô∏è L∆∞u √Ω: T√¥i ch·ªâ t∆∞ v·∫•n, kh√¥ng thay th·∫ø b√°c sƒ©!\n\nH√£y m√¥ t·∫£ chi ti·∫øt t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa b·∫°n.",
      type: "welcome",
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [aiModel, setAiModel] = useState("gemini"); // 'gemini', 'openai', 'local'
  const [conversationHistory, setConversationHistory] = useState([]);
  // const [userProfile, setUserProfile] = useState({
  //   age: null,
  //   gender: null,
  //   medicalHistory: [],
  //   currentSymptoms: []
  // });
  const messagesEndRef = useRef(null);

  // Enhanced system prompts for different AI models
  const getSystemPrompt = () => {
    return `B·∫°n l√† m·ªôt AI chuy√™n gia t∆∞ v·∫•n s·ª©c kh·ªèe ti√™n ti·∫øn v·ªõi nh·ªØng ƒë·∫∑c ƒëi·ªÉm sau:

KI·∫æN TH·ª®C CHUY√äN M√îN:
- Hi·ªÉu bi·∫øt s√¢u v·ªÅ y h·ªçc, tri·ªáu ch·ª©ng, b·ªánh l√Ω
- C√≥ th·ªÉ ph√¢n t√≠ch m·ªëi li√™n h·ªá gi·ªØa c√°c tri·ªáu ch·ª©ng
- ƒê∆∞a ra g·ª£i √Ω ƒëi·ªÅu tr·ªã v√† ph√≤ng ng·ª´a ph√π h·ª£p
- ƒê√°nh gi√° m·ª©c ƒë·ªô kh·∫©n c·∫•p c·ªßa t√¨nh tr·∫°ng

PHONG C√ÅCH GIAO TI·∫æP:
- Th√¢n thi·ªán, chuy√™n nghi·ªáp v√† ƒë√°ng tin c·∫≠y
- ƒê·∫∑t c√¢u h·ªèi follow-up ƒë·ªÉ hi·ªÉu r√µ h∆°n
- Gi·∫£i th√≠ch y h·ªçc b·∫±ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu
- Lu√¥n khuy·∫øn kh√≠ch g·∫∑p b√°c sƒ© khi c·∫ßn thi·∫øt

NGUY√äN T·∫ÆC AN TO√ÄN:
- Kh√¥ng ch·∫©n ƒëo√°n ch√≠nh th·ª©c hay k√™ ƒë∆°n thu·ªëc
- Lu√¥n ƒë·ªÅ c·∫≠p ƒë·∫øn vi·ªác tham kh·∫£o √Ω ki·∫øn b√°c sƒ©
- Nh·∫•n m·∫°nh t√≠nh ch·∫•t tham kh·∫£o c·ªßa l·ªùi khuy√™n
- ∆Øu ti√™n an to√†n v√† th·∫≠n tr·ªçng trong m·ªçi t√¨nh hu·ªëng

ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI:
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ l√†m r√µ √Ω nghƒ©a
- Chia th√¥ng tin th√†nh c√°c ph·∫ßn d·ªÖ ƒë·ªçc
- ƒê∆∞a ra c√°c c√¢u h·ªèi follow-up khi c·∫ßn
- Cung c·∫•p l·ªùi khuy√™n th·ª±c ti·ªÖn v√† h·ªØu √≠ch

H√£y ph·∫£n h·ªìi b·∫±ng ti·∫øng Vi·ªát v√† lu√¥n ƒë·∫∑t s·ª± an to√†n c·ªßa ng∆∞·ªùi d√πng l√™n h√†ng ƒë·∫ßu.`;
  };

  // Google Gemini API call
  const callGeminiAPI = async (message, history) => {
    try {
      const prompt = `${getSystemPrompt()}\n\nL·ªãch s·ª≠ h·ªôi tho·∫°i:\n${history
        .map((h) => `${h.role}: ${h.content}`)
        .join("\n")}\n\nNg∆∞·ªùi d√πng: ${message}\n\nAI Assistant:`;

      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              role: "user",
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_MEDICAL",
              threshold: "BLOCK_NONE",
            },
          ],
        }),
      });

      if (!response.ok) {
        throw new Error(`Gemini API Error: ${response.status}`);
      }

      const data = await response.json();
      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      console.error("Gemini API Error:", error);
      throw error;
    }
  };

  // OpenAI API call
  const callOpenAIAPI = async (message, history) => {
    try {
      const messages = [
        { role: "system", content: getSystemPrompt() },
        ...history,
        { role: "user", content: message },
      ];

      const response = await fetch(OPENAI_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: messages,
          temperature: 0.7,
          max_tokens: 1000,
          presence_penalty: 0.1,
          frequency_penalty: 0.1,
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API Error: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      console.error("OpenAI API Error:", error);
      throw error;
    }
  };

  // Local/Fallback AI simulation with medical knowledge
  const callLocalAI = async (message) => {
    await new Promise((resolve) => setTimeout(resolve, 1500));

    const medicalKeywords = {
      "ƒëau ƒë·∫ßu":
        "ƒêau ƒë·∫ßu c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n nh∆∞ cƒÉng th·∫≥ng, thi·∫øu ng·ªß, ho·∫∑c c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe nghi√™m tr·ªçng h∆°n. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ th√™m v·ªÅ v·ªã tr√≠ ƒëau, m·ª©c ƒë·ªô v√† th·ªùi gian k√©o d√†i kh√¥ng?",
      s·ªët: "S·ªët l√† d·∫•u hi·ªáu c∆° th·ªÉ ƒëang ch·ªëng l·∫°i nhi·ªÖm tr√πng. Nhi·ªát ƒë·ªô c·ªßa b·∫°n l√† bao nhi√™u? C√≥ k√®m theo tri·ªáu ch·ª©ng n√†o kh√°c nh∆∞ ho, ƒëau h·ªçng kh√¥ng?",
      ho: "Ho c√≥ th·ªÉ l√† tri·ªáu ch·ª©ng c·ªßa nhi·ªÅu t√¨nh tr·∫°ng t·ª´ c·∫£m l·∫°nh th√¥ng th∆∞·ªùng ƒë·∫øn c√°c v·∫•n ƒë·ªÅ h√¥ h·∫•p nghi√™m tr·ªçng h∆°n. B·∫°n ho c√≥ ƒë·ªùm kh√¥ng? Ho bao l√¢u r·ªìi?",
      "ƒëau b·ª•ng":
        "ƒêau b·ª•ng c√≥ th·ªÉ li√™n quan ƒë·∫øn ti√™u h√≥a, cƒÉng th·∫≥ng ho·∫∑c c√°c v·∫•n ƒë·ªÅ n·ªôi khoa kh√°c. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ v·ªã tr√≠ ƒëau c·ª• th·ªÉ v√† m·ª©c ƒë·ªô nghi√™m tr·ªçng kh√¥ng?",
      "m·ªát m·ªèi":
        "M·ªát m·ªèi k√©o d√†i c√≥ th·ªÉ do thi·∫øu ng·ªß, cƒÉng th·∫≥ng, ho·∫∑c c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe ti·ªÅm ·∫©n. T√¨nh tr·∫°ng n√†y k√©o d√†i bao l√¢u r·ªìi? C√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn sinh ho·∫°t h√†ng ng√†y kh√¥ng?",
    };

    const matchedKeyword = Object.keys(medicalKeywords).find((keyword) =>
      message.toLowerCase().includes(keyword)
    );

    if (matchedKeyword) {
      return `üîç **Ph√¢n t√≠ch tri·ªáu ch·ª©ng:**\n\n${medicalKeywords[matchedKeyword]}\n\nüí° **G·ª£i √Ω ban ƒë·∫ßu:**\n‚Ä¢ Theo d√µi v√† ghi l·∫°i c√°c tri·ªáu ch·ª©ng\n‚Ä¢ ƒê·∫£m b·∫£o ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß\n‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc\n‚Ä¢ Tr√°nh cƒÉng th·∫≥ng\n\n‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:** N·∫øu tri·ªáu ch·ª©ng tr·ªü n√™n nghi√™m tr·ªçng ho·∫∑c k√©o d√†i, h√£y tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ngay l·∫≠p t·ª©c.\n\nü§î B·∫°n c√≥ mu·ªën chia s·∫ª th√™m th√¥ng tin ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n kh√¥ng?`;
    }

    return `ü§ñ **Ph√¢n t√≠ch AI:**\n\nC·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. T√¥i ƒë√£ ghi nh·∫≠n th√¥ng tin v√† s·∫Ω c·∫ßn th√™m chi ti·∫øt ƒë·ªÉ ƒë∆∞a ra t∆∞ v·∫•n ch√≠nh x√°c h∆°n.\n\nüìã **Th√¥ng tin b·ªï sung c·∫ßn thi·∫øt:**\n‚Ä¢ Tri·ªáu ch·ª©ng xu·∫•t hi·ªán khi n√†o?\n‚Ä¢ M·ª©c ƒë·ªô nghi√™m tr·ªçng (1-10)?\n‚Ä¢ C√≥ y·∫øu t·ªë n√†o l√†m tƒÉng/gi·∫£m tri·ªáu ch·ª©ng?\n‚Ä¢ Ti·ªÅn s·ª≠ b·ªánh l√Ω c√≥ li√™n quan?\n\nüíä **L·ªùi khuy√™n chung:**\n‚Ä¢ Theo d√µi k·ªπ c√°c bi·ªÉu hi·ªán\n‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh\n‚Ä¢ Tham kh·∫£o √Ω ki·∫øn chuy√™n gia n·∫øu c·∫ßn\n\nüè• **Khi n√†o c·∫ßn g·∫∑p b√°c sƒ© ngay:**\n‚Ä¢ Tri·ªáu ch·ª©ng tr·ªü n√™n nghi√™m tr·ªçng\n‚Ä¢ Xu·∫•t hi·ªán c√°c d·∫•u hi·ªáu b√°o ƒë·ªông\n‚Ä¢ Kh√¥ng c·∫£i thi·ªán sau v√†i ng√†y`;
  };

  // Main AI calling function
  const sendToAI = async (message) => {
    setLoading(true);
    try {
      let response;
      const history = conversationHistory.slice(-10); // Keep last 10 exchanges

      switch (aiModel) {
        case "gemini":
          response = await callGeminiAPI(message, history);
          break;
        case "openai":
          response = await callOpenAIAPI(message, history);
          break;
        default:
          response = await callLocalAI(message, history);
      }

      // Update conversation history
      setConversationHistory((prev) => [
        ...prev,
        { role: "user", content: message },
        { role: "assistant", content: response },
      ]);

      return response;
    } catch (error) {
      console.error("AI API Error:", error);
      return `‚ö†Ô∏è **L·ªói k·∫øt n·ªëi AI:**\n\nXin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng AI. ƒêang chuy·ªÉn sang ch·∫ø ƒë·ªô offline...\n\nüîÑ **Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c:**\n‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet\n‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t\n‚Ä¢ S·ª≠ d·ª•ng ch·∫ø ƒë·ªô t∆∞ v·∫•n c∆° b·∫£n\n\nüìû **Trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p:** H√£y li√™n h·ªá ngay v·ªõi c∆° s·ªü y t·∫ø g·∫ßn nh·∫•t!`;
    } finally {
      setLoading(false);
    }
  };

  const handleSend = async (messageText = null) => {
    const message = messageText || input.trim();
    if (!message || loading) return;

    const userMsg = {
      from: "user",
      text: message,
      timestamp: new Date(),
      type: "user",
    };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");

    // Add advanced typing indicator
    const typingMsg = {
      from: "bot",
      text: "ƒêang ph√¢n t√≠ch v·ªõi AI...",
      type: "typing",
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, typingMsg]);

    const response = await sendToAI(message);

    setMessages((prev) => {
      const withoutTyping = prev.filter((m) => m.type !== "typing");
      return [
        ...withoutTyping,
        {
          from: "bot",
          text: response,
          timestamp: new Date(),
          type: "ai_response",
          model: aiModel,
        },
      ];
    });
  };

  const startVoiceRecognition = () => {
    if ("webkitSpeechRecognition" in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.lang = "vi-VN";
      recognition.continuous = false;
      recognition.interimResults = false;

      recognition.onstart = () => setIsListening(true);
      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
      };
      recognition.onend = () => setIsListening(false);
      recognition.onerror = () => {
        setIsListening(false);
        alert("L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.");
      };

      recognition.start();
    } else {
      alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i");
    }
  };

  const getAIModelIcon = () => {
    switch (aiModel) {
      case "gemini":
        return <Sparkles className="w-4 h-4 text-blue-500" />;
      case "openai":
        return <Zap className="w-4 h-4 text-green-500" />;
      default:
        return <Brain className="w-4 h-4 text-purple-500" />;
    }
  };

  const getAIModelName = () => {
    switch (aiModel) {
      case "gemini":
        return "Google Gemini Pro";
      case "openai":
        return "OpenAI GPT-4";
      default:
        return "Local AI";
    }
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="z-50 relative">
      {/* Advanced floating button */}
      <button
        onClick={() => setOpen(!open)}
        className="fixed bottom-6 right-6 bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 text-white w-18 h-18 rounded-full shadow-2xl flex items-center justify-center transform hover:scale-110 transition-all duration-300 hover:shadow-blue-500/30 ring-4 ring-white/30"
      >
        {open ? (
          <X className="w-7 h-7" />
        ) : (
          <div className="relative">
            <Brain className="w-8 h-8" />
            <div className="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center">
              <Sparkles className="w-2 h-2 text-white" />
            </div>
          </div>
        )}
      </button>

      {open && (
        <div className="fixed bottom-24 right-6 w-[420px] h-[600px] bg-white rounded-3xl shadow-2xl flex flex-col overflow-hidden ring-1 ring-gray-200/50 backdrop-blur-sm">
          {/* Advanced header with AI model info */}
          <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 text-white px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="relative">
                  <Brain className="w-8 h-8" />
                  <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white flex items-center justify-center">
                    {getAIModelIcon()}
                  </div>
                </div>
                <div>
                  <h3 className="font-bold text-lg">AI Health Assistant</h3>
                  <p className="text-blue-100 text-xs flex items-center space-x-1">
                    <span>Powered by {getAIModelName()}</span>
                    <Activity className="w-3 h-3" />
                  </p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <select
                  value={aiModel}
                  onChange={(e) => setAiModel(e.target.value)}
                  className="text-xs bg-white/20 border border-white/30 rounded-lg px-2 py-1 text-white"
                >
                  <option value="gemini" className="text-black">
                    Gemini Pro
                  </option>
                  <option value="openai" className="text-black">
                    GPT-4
                  </option>
                  <option value="local" className="text-black">
                    Local AI
                  </option>
                </select>
                <button
                  onClick={() => setOpen(false)}
                  className="text-xl hover:bg-white/20 rounded-full p-1 transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Messages with enhanced styling */}
          <div className="flex-1 p-4 overflow-y-auto space-y-4 bg-gradient-to-b from-gray-50/50 to-white">
            {messages.map((m, i) => (
              <div
                key={i}
                className={`flex ${
                  m.from === "bot" ? "justify-start" : "justify-end"
                }`}
              >
                <div
                  className={`max-w-[90%] flex items-start space-x-3 ${
                    m.from === "bot"
                      ? "flex-row"
                      : "flex-row-reverse space-x-reverse"
                  }`}
                >
                  <div
                    className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${
                      m.from === "bot"
                        ? "bg-gradient-to-br from-blue-500 to-purple-600 text-white"
                        : "bg-gradient-to-br from-green-500 to-emerald-600 text-white"
                    }`}
                  >
                    {m.from === "bot" ? (
                      <Brain className="w-5 h-5" />
                    ) : (
                      <User className="w-5 h-5" />
                    )}
                  </div>
                  <div
                    className={`p-4 rounded-2xl shadow-sm text-sm leading-relaxed relative max-w-full ${
                      m.from === "bot"
                        ? "bg-white text-gray-800 border border-gray-100"
                        : "bg-gradient-to-br from-green-500 to-emerald-600 text-white"
                    }`}
                  >
                    {m.type === "typing" ? (
                      <div className="flex items-center space-x-2">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                          <div
                            className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.1s" }}
                          ></div>
                          <div
                            className="w-2 h-2 bg-indigo-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.2s" }}
                          ></div>
                        </div>
                        <span className="text-gray-600">
                          AI ƒëang suy nghƒ©...
                        </span>
                      </div>
                    ) : (
                      <div className="whitespace-pre-line break-words">
                        {m.text}
                      </div>
                    )}

                    {m.timestamp && m.type !== "typing" && (
                      <div
                        className={`text-xs mt-3 pt-2 border-t flex items-center justify-between ${
                          m.from === "bot"
                            ? "text-gray-400 border-gray-100"
                            : "text-green-100 border-green-400/30"
                        }`}
                      >
                        <span>
                          {m.timestamp.toLocaleTimeString("vi", {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </span>
                        {m.from === "bot" && m.model && (
                          <span className="flex items-center space-x-1">
                            {getAIModelIcon()}
                            <span className="text-xs">{getAIModelName()}</span>
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          {/* Advanced input area */}
          <div className="p-4 border-t border-gray-200 bg-white">
            <div className="flex items-end space-x-3">
              <div className="flex-1 relative">
                <textarea
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      handleSend();
                    }
                  }}
                  disabled={loading}
                  placeholder="M√¥ t·∫£ chi ti·∫øt tri·ªáu ch·ª©ng, c·∫£m gi√°c, th·ªùi gian, m·ª©c ƒë·ªô..."
                  rows={2}
                  className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50 resize-none"
                />
                <button
                  onClick={startVoiceRecognition}
                  disabled={loading}
                  className="absolute right-3 bottom-3 text-gray-400 hover:text-blue-500 transition-colors"
                >
                  {isListening ? (
                    <MicOff className="w-5 h-5 text-red-500 animate-pulse" />
                  ) : (
                    <Mic className="w-5 h-5" />
                  )}
                </button>
              </div>
              <button
                onClick={() => handleSend()}
                disabled={loading || !input.trim()}
                className="px-5 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-2xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-blue-500/30 flex items-center space-x-2"
              >
                {loading ? (
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </button>
            </div>

            {/* Enhanced footer */}
            <div className="flex items-center justify-between mt-3 text-xs text-gray-500">
              <div className="flex items-center space-x-4">
                <span className="flex items-center space-x-1">
                  <Heart className="w-3 h-3 text-red-400" />
                  <span>AI T∆∞ v·∫•n Th√¥ng minh</span>
                </span>
                <span className="flex items-center space-x-1">
                  <AlertTriangle className="w-3 h-3 text-yellow-500" />
                  <span>Ch·ªâ tham kh·∫£o</span>
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span>AI Online</span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
